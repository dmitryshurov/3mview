/***********************************************************************************
 *                                                                                 *
 * Voreen - The Volume Rendering Engine                                            *
 *                                                                                 *
 * Copyright (C) 2005-2012 University of Muenster, Germany.                        *
 * Visualization and Computer Graphics Group <http://viscg.uni-muenster.de>        *
 * For a list of authors please refer to the file "CREDITS.txt".                   *
 *                                                                                 *
 * This file is part of the Voreen software package. Voreen is free software:      *
 * you can redistribute it and/or modify it under the terms of the GNU General     *
 * Public License version 2 as published by the Free Software Foundation.          *
 *                                                                                 *
 * Voreen is distributed in the hope that it will be useful, but WITHOUT ANY       *
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR   *
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.      *
 *                                                                                 *
 * You should have received a copy of the GNU General Public License in the file   *
 * "LICENSE.txt" along with this file. If not, see <http://www.gnu.org/licenses/>. *
 *                                                                                 *
 * For non-commercial academic use see the license exception specified in the file *
 * "LICENSE-academic.txt". To get information about commercial licensing please    *
 * contact the authors.                                                            *
 *                                                                                 *
 ***********************************************************************************/

#include "primitivegeometrysource.h"

#include "voreen/core/voreenapplication.h"
#include "voreen/core/datastructures/geometry/meshlistgeometry.h"
#include "voreen/core/datastructures/geometry/pointlistgeometry.h"
#include "voreen/core/datastructures/geometry/pointsegmentlistgeometry.h"

#include "voreen/core/properties/callmemberaction.h"

#include <vector>
#include <fstream>

using tgt::vec3;
using tgt::ivec3;
using tgt::ivec2;
using std::vector;

namespace voreen {

const std::string PrimitiveGeometrySource::loggerCat_("voreen.sample.PrimitiveGeometrySource");

PrimitiveGeometrySource::PrimitiveGeometrySource()
  : Processor(),
    geometryType_("geometryType", "Geometry Type"),
    loadGeometry_("loadGeometry", "Load Geometry"),
    clearGeometry_("clearGeometry", "Clear Geometry"),
    outport_(Port::OUTPORT, "geometry.pointlist", "PointList Output")
{
    geometryType_.addOption("plane", "Plane");

    loadGeometry_.onChange(CallMemberAction<PrimitiveGeometrySource>(this, &PrimitiveGeometrySource::readGeometry));
    clearGeometry_.onChange(CallMemberAction<PrimitiveGeometrySource>(this, &PrimitiveGeometrySource::clearGeometry));
    geometryType_.onChange(CallMemberAction<PrimitiveGeometrySource>(this, &PrimitiveGeometrySource::updatePropertyVisibility));

    
    addProperty(geometryType_);
    addProperty(loadGeometry_);
    addProperty(clearGeometry_);

    addPort(outport_);
}

Processor* PrimitiveGeometrySource::create() const {
    return new PrimitiveGeometrySource();
}

void PrimitiveGeometrySource::process() {}

void PrimitiveGeometrySource::initialize() throw (tgt::Exception) {
    Processor::initialize();

    updatePropertyVisibility();
}

void PrimitiveGeometrySource::readGeometry() {
    if (geometryType_.isSelected("plane")) {
        try {
            Geometry* geometry = createPlaneGeometry();
            tgtAssert(geometry, "null pointer returned (exception expected)");
            outport_.setData(geometry);
        }
        catch (VoreenException& e) {
            LERROR(e.what());
        }
    }
    else {
        LWARNING("Unknown geometry type: " << geometryType_.get());
    }

    updatePropertyVisibility();
}

Geometry* PrimitiveGeometrySource::createPlaneGeometry() const
    throw (VoreenException)
{
    FaceGeometry* geometry = new FaceGeometry();
    geometry->addVertex(VertexGeometry(tgt::vec3( 1,  1,  0)));
    geometry->addVertex(VertexGeometry(tgt::vec3(-1,  1,  0)));
    geometry->addVertex(VertexGeometry(tgt::vec3(-1, -1,  0)));
    geometry->addVertex(VertexGeometry(tgt::vec3( 1, -1,  0)));
    geometry->getVertex(0).setColor(tgt::vec3( 1, 1,  0));
    geometry->setFaceNormal(tgt::vec3( 0, 0,  1));
    return geometry;
}

Geometry* PrimitiveGeometrySource::createCubeGeometry() const
    throw (VoreenException)
{
    MeshGeometry* geometry = new MeshGeometry();
    geometry->createCube();
    return geometry;
}

void PrimitiveGeometrySource::clearGeometry() {
    outport_.setData(0);
    updatePropertyVisibility();
}

void PrimitiveGeometrySource::updatePropertyVisibility() {
    clearGeometry_.setWidgetsEnabled(outport_.getData());
}

} // namespace voreen
